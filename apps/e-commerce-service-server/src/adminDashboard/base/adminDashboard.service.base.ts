/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AdminDashboard as PrismaAdminDashboard } from "@prisma/client";

export class AdminDashboardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdminDashboardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.adminDashboard.count(args);
  }

  async adminDashboards(
    args: Prisma.AdminDashboardFindManyArgs
  ): Promise<PrismaAdminDashboard[]> {
    return this.prisma.adminDashboard.findMany(args);
  }
  async adminDashboard(
    args: Prisma.AdminDashboardFindUniqueArgs
  ): Promise<PrismaAdminDashboard | null> {
    return this.prisma.adminDashboard.findUnique(args);
  }
  async createAdminDashboard(
    args: Prisma.AdminDashboardCreateArgs
  ): Promise<PrismaAdminDashboard> {
    return this.prisma.adminDashboard.create(args);
  }
  async updateAdminDashboard(
    args: Prisma.AdminDashboardUpdateArgs
  ): Promise<PrismaAdminDashboard> {
    return this.prisma.adminDashboard.update(args);
  }
  async deleteAdminDashboard(
    args: Prisma.AdminDashboardDeleteArgs
  ): Promise<PrismaAdminDashboard> {
    return this.prisma.adminDashboard.delete(args);
  }
}
