/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdminDashboard } from "./AdminDashboard";
import { AdminDashboardCountArgs } from "./AdminDashboardCountArgs";
import { AdminDashboardFindManyArgs } from "./AdminDashboardFindManyArgs";
import { AdminDashboardFindUniqueArgs } from "./AdminDashboardFindUniqueArgs";
import { CreateAdminDashboardArgs } from "./CreateAdminDashboardArgs";
import { UpdateAdminDashboardArgs } from "./UpdateAdminDashboardArgs";
import { DeleteAdminDashboardArgs } from "./DeleteAdminDashboardArgs";
import { AdminDashboardService } from "../adminDashboard.service";
@graphql.Resolver(() => AdminDashboard)
export class AdminDashboardResolverBase {
  constructor(protected readonly service: AdminDashboardService) {}

  async _adminDashboardsMeta(
    @graphql.Args() args: AdminDashboardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdminDashboard])
  async adminDashboards(
    @graphql.Args() args: AdminDashboardFindManyArgs
  ): Promise<AdminDashboard[]> {
    return this.service.adminDashboards(args);
  }

  @graphql.Query(() => AdminDashboard, { nullable: true })
  async adminDashboard(
    @graphql.Args() args: AdminDashboardFindUniqueArgs
  ): Promise<AdminDashboard | null> {
    const result = await this.service.adminDashboard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdminDashboard)
  async createAdminDashboard(
    @graphql.Args() args: CreateAdminDashboardArgs
  ): Promise<AdminDashboard> {
    return await this.service.createAdminDashboard({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AdminDashboard)
  async updateAdminDashboard(
    @graphql.Args() args: UpdateAdminDashboardArgs
  ): Promise<AdminDashboard | null> {
    try {
      return await this.service.updateAdminDashboard({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdminDashboard)
  async deleteAdminDashboard(
    @graphql.Args() args: DeleteAdminDashboardArgs
  ): Promise<AdminDashboard | null> {
    try {
      return await this.service.deleteAdminDashboard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
