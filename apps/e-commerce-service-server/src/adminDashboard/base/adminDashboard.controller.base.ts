/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdminDashboardService } from "../adminDashboard.service";
import { AdminDashboardCreateInput } from "./AdminDashboardCreateInput";
import { AdminDashboard } from "./AdminDashboard";
import { AdminDashboardFindManyArgs } from "./AdminDashboardFindManyArgs";
import { AdminDashboardWhereUniqueInput } from "./AdminDashboardWhereUniqueInput";
import { AdminDashboardUpdateInput } from "./AdminDashboardUpdateInput";

export class AdminDashboardControllerBase {
  constructor(protected readonly service: AdminDashboardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdminDashboard })
  async createAdminDashboard(
    @common.Body() data: AdminDashboardCreateInput
  ): Promise<AdminDashboard> {
    return await this.service.createAdminDashboard({
      data: data,
      select: {
        adminUser: true,
        createdAt: true,
        dashboardData: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdminDashboard] })
  @ApiNestedQuery(AdminDashboardFindManyArgs)
  async adminDashboards(
    @common.Req() request: Request
  ): Promise<AdminDashboard[]> {
    const args = plainToClass(AdminDashboardFindManyArgs, request.query);
    return this.service.adminDashboards({
      ...args,
      select: {
        adminUser: true,
        createdAt: true,
        dashboardData: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdminDashboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adminDashboard(
    @common.Param() params: AdminDashboardWhereUniqueInput
  ): Promise<AdminDashboard | null> {
    const result = await this.service.adminDashboard({
      where: params,
      select: {
        adminUser: true,
        createdAt: true,
        dashboardData: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdminDashboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdminDashboard(
    @common.Param() params: AdminDashboardWhereUniqueInput,
    @common.Body() data: AdminDashboardUpdateInput
  ): Promise<AdminDashboard | null> {
    try {
      return await this.service.updateAdminDashboard({
        where: params,
        data: data,
        select: {
          adminUser: true,
          createdAt: true,
          dashboardData: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdminDashboard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdminDashboard(
    @common.Param() params: AdminDashboardWhereUniqueInput
  ): Promise<AdminDashboard | null> {
    try {
      return await this.service.deleteAdminDashboard({
        where: params,
        select: {
          adminUser: true,
          createdAt: true,
          dashboardData: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
