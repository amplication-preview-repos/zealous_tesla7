/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Filter as PrismaFilter } from "@prisma/client";

export class FilterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FilterCountArgs, "select">): Promise<number> {
    return this.prisma.filter.count(args);
  }

  async filters(args: Prisma.FilterFindManyArgs): Promise<PrismaFilter[]> {
    return this.prisma.filter.findMany(args);
  }
  async filter(
    args: Prisma.FilterFindUniqueArgs
  ): Promise<PrismaFilter | null> {
    return this.prisma.filter.findUnique(args);
  }
  async createFilter(args: Prisma.FilterCreateArgs): Promise<PrismaFilter> {
    return this.prisma.filter.create(args);
  }
  async updateFilter(args: Prisma.FilterUpdateArgs): Promise<PrismaFilter> {
    return this.prisma.filter.update(args);
  }
  async deleteFilter(args: Prisma.FilterDeleteArgs): Promise<PrismaFilter> {
    return this.prisma.filter.delete(args);
  }
}
