/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FilterService } from "../filter.service";
import { FilterCreateInput } from "./FilterCreateInput";
import { Filter } from "./Filter";
import { FilterFindManyArgs } from "./FilterFindManyArgs";
import { FilterWhereUniqueInput } from "./FilterWhereUniqueInput";
import { FilterUpdateInput } from "./FilterUpdateInput";

export class FilterControllerBase {
  constructor(protected readonly service: FilterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Filter })
  async createFilter(@common.Body() data: FilterCreateInput): Promise<Filter> {
    return await this.service.createFilter({
      data: data,
      select: {
        createdAt: true,
        criteria: true,
        id: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Filter] })
  @ApiNestedQuery(FilterFindManyArgs)
  async filters(@common.Req() request: Request): Promise<Filter[]> {
    const args = plainToClass(FilterFindManyArgs, request.query);
    return this.service.filters({
      ...args,
      select: {
        createdAt: true,
        criteria: true,
        id: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Filter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async filter(
    @common.Param() params: FilterWhereUniqueInput
  ): Promise<Filter | null> {
    const result = await this.service.filter({
      where: params,
      select: {
        createdAt: true,
        criteria: true,
        id: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Filter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFilter(
    @common.Param() params: FilterWhereUniqueInput,
    @common.Body() data: FilterUpdateInput
  ): Promise<Filter | null> {
    try {
      return await this.service.updateFilter({
        where: params,
        data: data,
        select: {
          createdAt: true,
          criteria: true,
          id: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Filter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFilter(
    @common.Param() params: FilterWhereUniqueInput
  ): Promise<Filter | null> {
    try {
      return await this.service.deleteFilter({
        where: params,
        select: {
          createdAt: true,
          criteria: true,
          id: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
