/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HelpDesk } from "./HelpDesk";
import { HelpDeskCountArgs } from "./HelpDeskCountArgs";
import { HelpDeskFindManyArgs } from "./HelpDeskFindManyArgs";
import { HelpDeskFindUniqueArgs } from "./HelpDeskFindUniqueArgs";
import { CreateHelpDeskArgs } from "./CreateHelpDeskArgs";
import { UpdateHelpDeskArgs } from "./UpdateHelpDeskArgs";
import { DeleteHelpDeskArgs } from "./DeleteHelpDeskArgs";
import { User } from "../../user/base/User";
import { HelpDeskService } from "../helpDesk.service";
@graphql.Resolver(() => HelpDesk)
export class HelpDeskResolverBase {
  constructor(protected readonly service: HelpDeskService) {}

  async _helpDesksMeta(
    @graphql.Args() args: HelpDeskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HelpDesk])
  async helpDesks(
    @graphql.Args() args: HelpDeskFindManyArgs
  ): Promise<HelpDesk[]> {
    return this.service.helpDesks(args);
  }

  @graphql.Query(() => HelpDesk, { nullable: true })
  async helpDesk(
    @graphql.Args() args: HelpDeskFindUniqueArgs
  ): Promise<HelpDesk | null> {
    const result = await this.service.helpDesk(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HelpDesk)
  async createHelpDesk(
    @graphql.Args() args: CreateHelpDeskArgs
  ): Promise<HelpDesk> {
    return await this.service.createHelpDesk({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => HelpDesk)
  async updateHelpDesk(
    @graphql.Args() args: UpdateHelpDeskArgs
  ): Promise<HelpDesk | null> {
    try {
      return await this.service.updateHelpDesk({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HelpDesk)
  async deleteHelpDesk(
    @graphql.Args() args: DeleteHelpDeskArgs
  ): Promise<HelpDesk | null> {
    try {
      return await this.service.deleteHelpDesk(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: HelpDesk): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
