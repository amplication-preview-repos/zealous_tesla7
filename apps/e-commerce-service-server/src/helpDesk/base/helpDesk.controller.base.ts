/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HelpDeskService } from "../helpDesk.service";
import { HelpDeskCreateInput } from "./HelpDeskCreateInput";
import { HelpDesk } from "./HelpDesk";
import { HelpDeskFindManyArgs } from "./HelpDeskFindManyArgs";
import { HelpDeskWhereUniqueInput } from "./HelpDeskWhereUniqueInput";
import { HelpDeskUpdateInput } from "./HelpDeskUpdateInput";

export class HelpDeskControllerBase {
  constructor(protected readonly service: HelpDeskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HelpDesk })
  async createHelpDesk(
    @common.Body() data: HelpDeskCreateInput
  ): Promise<HelpDesk> {
    return await this.service.createHelpDesk({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        createdDate: true,
        description: true,
        id: true,
        issueType: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HelpDesk] })
  @ApiNestedQuery(HelpDeskFindManyArgs)
  async helpDesks(@common.Req() request: Request): Promise<HelpDesk[]> {
    const args = plainToClass(HelpDeskFindManyArgs, request.query);
    return this.service.helpDesks({
      ...args,
      select: {
        createdAt: true,
        createdDate: true,
        description: true,
        id: true,
        issueType: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HelpDesk })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async helpDesk(
    @common.Param() params: HelpDeskWhereUniqueInput
  ): Promise<HelpDesk | null> {
    const result = await this.service.helpDesk({
      where: params,
      select: {
        createdAt: true,
        createdDate: true,
        description: true,
        id: true,
        issueType: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HelpDesk })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHelpDesk(
    @common.Param() params: HelpDeskWhereUniqueInput,
    @common.Body() data: HelpDeskUpdateInput
  ): Promise<HelpDesk | null> {
    try {
      return await this.service.updateHelpDesk({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          createdDate: true,
          description: true,
          id: true,
          issueType: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HelpDesk })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHelpDesk(
    @common.Param() params: HelpDeskWhereUniqueInput
  ): Promise<HelpDesk | null> {
    try {
      return await this.service.deleteHelpDesk({
        where: params,
        select: {
          createdAt: true,
          createdDate: true,
          description: true,
          id: true,
          issueType: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
