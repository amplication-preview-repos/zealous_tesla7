/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  HelpDesk as PrismaHelpDesk,
  User as PrismaUser,
} from "@prisma/client";

export class HelpDeskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HelpDeskCountArgs, "select">): Promise<number> {
    return this.prisma.helpDesk.count(args);
  }

  async helpDesks(
    args: Prisma.HelpDeskFindManyArgs
  ): Promise<PrismaHelpDesk[]> {
    return this.prisma.helpDesk.findMany(args);
  }
  async helpDesk(
    args: Prisma.HelpDeskFindUniqueArgs
  ): Promise<PrismaHelpDesk | null> {
    return this.prisma.helpDesk.findUnique(args);
  }
  async createHelpDesk(
    args: Prisma.HelpDeskCreateArgs
  ): Promise<PrismaHelpDesk> {
    return this.prisma.helpDesk.create(args);
  }
  async updateHelpDesk(
    args: Prisma.HelpDeskUpdateArgs
  ): Promise<PrismaHelpDesk> {
    return this.prisma.helpDesk.update(args);
  }
  async deleteHelpDesk(
    args: Prisma.HelpDeskDeleteArgs
  ): Promise<PrismaHelpDesk> {
    return this.prisma.helpDesk.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.helpDesk
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
