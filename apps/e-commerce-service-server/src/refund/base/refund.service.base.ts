/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Refund as PrismaRefund,
  Payment as PrismaPayment,
} from "@prisma/client";

export class RefundServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RefundCountArgs, "select">): Promise<number> {
    return this.prisma.refund.count(args);
  }

  async refunds(args: Prisma.RefundFindManyArgs): Promise<PrismaRefund[]> {
    return this.prisma.refund.findMany(args);
  }
  async refund(
    args: Prisma.RefundFindUniqueArgs
  ): Promise<PrismaRefund | null> {
    return this.prisma.refund.findUnique(args);
  }
  async createRefund(args: Prisma.RefundCreateArgs): Promise<PrismaRefund> {
    return this.prisma.refund.create(args);
  }
  async updateRefund(args: Prisma.RefundUpdateArgs): Promise<PrismaRefund> {
    return this.prisma.refund.update(args);
  }
  async deleteRefund(args: Prisma.RefundDeleteArgs): Promise<PrismaRefund> {
    return this.prisma.refund.delete(args);
  }

  async getPayment(parentId: string): Promise<PrismaPayment | null> {
    return this.prisma.refund
      .findUnique({
        where: { id: parentId },
      })
      .payment();
  }
}
