/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContentManagement } from "./ContentManagement";
import { ContentManagementCountArgs } from "./ContentManagementCountArgs";
import { ContentManagementFindManyArgs } from "./ContentManagementFindManyArgs";
import { ContentManagementFindUniqueArgs } from "./ContentManagementFindUniqueArgs";
import { CreateContentManagementArgs } from "./CreateContentManagementArgs";
import { UpdateContentManagementArgs } from "./UpdateContentManagementArgs";
import { DeleteContentManagementArgs } from "./DeleteContentManagementArgs";
import { ContentManagementService } from "../contentManagement.service";
@graphql.Resolver(() => ContentManagement)
export class ContentManagementResolverBase {
  constructor(protected readonly service: ContentManagementService) {}

  async _contentManagementsMeta(
    @graphql.Args() args: ContentManagementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContentManagement])
  async contentManagements(
    @graphql.Args() args: ContentManagementFindManyArgs
  ): Promise<ContentManagement[]> {
    return this.service.contentManagements(args);
  }

  @graphql.Query(() => ContentManagement, { nullable: true })
  async contentManagement(
    @graphql.Args() args: ContentManagementFindUniqueArgs
  ): Promise<ContentManagement | null> {
    const result = await this.service.contentManagement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContentManagement)
  async createContentManagement(
    @graphql.Args() args: CreateContentManagementArgs
  ): Promise<ContentManagement> {
    return await this.service.createContentManagement({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContentManagement)
  async updateContentManagement(
    @graphql.Args() args: UpdateContentManagementArgs
  ): Promise<ContentManagement | null> {
    try {
      return await this.service.updateContentManagement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContentManagement)
  async deleteContentManagement(
    @graphql.Args() args: DeleteContentManagementArgs
  ): Promise<ContentManagement | null> {
    try {
      return await this.service.deleteContentManagement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
