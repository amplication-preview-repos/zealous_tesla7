/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContentManagementService } from "../contentManagement.service";
import { ContentManagementCreateInput } from "./ContentManagementCreateInput";
import { ContentManagement } from "./ContentManagement";
import { ContentManagementFindManyArgs } from "./ContentManagementFindManyArgs";
import { ContentManagementWhereUniqueInput } from "./ContentManagementWhereUniqueInput";
import { ContentManagementUpdateInput } from "./ContentManagementUpdateInput";

export class ContentManagementControllerBase {
  constructor(protected readonly service: ContentManagementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContentManagement })
  async createContentManagement(
    @common.Body() data: ContentManagementCreateInput
  ): Promise<ContentManagement> {
    return await this.service.createContentManagement({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        publishDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContentManagement] })
  @ApiNestedQuery(ContentManagementFindManyArgs)
  async contentManagements(
    @common.Req() request: Request
  ): Promise<ContentManagement[]> {
    const args = plainToClass(ContentManagementFindManyArgs, request.query);
    return this.service.contentManagements({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        publishDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContentManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contentManagement(
    @common.Param() params: ContentManagementWhereUniqueInput
  ): Promise<ContentManagement | null> {
    const result = await this.service.contentManagement({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        publishDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContentManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContentManagement(
    @common.Param() params: ContentManagementWhereUniqueInput,
    @common.Body() data: ContentManagementUpdateInput
  ): Promise<ContentManagement | null> {
    try {
      return await this.service.updateContentManagement({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          publishDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContentManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContentManagement(
    @common.Param() params: ContentManagementWhereUniqueInput
  ): Promise<ContentManagement | null> {
    try {
      return await this.service.deleteContentManagement({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          publishDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
