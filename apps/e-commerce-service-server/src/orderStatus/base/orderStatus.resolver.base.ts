/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OrderStatus } from "./OrderStatus";
import { OrderStatusCountArgs } from "./OrderStatusCountArgs";
import { OrderStatusFindManyArgs } from "./OrderStatusFindManyArgs";
import { OrderStatusFindUniqueArgs } from "./OrderStatusFindUniqueArgs";
import { CreateOrderStatusArgs } from "./CreateOrderStatusArgs";
import { UpdateOrderStatusArgs } from "./UpdateOrderStatusArgs";
import { DeleteOrderStatusArgs } from "./DeleteOrderStatusArgs";
import { Order } from "../../order/base/Order";
import { OrderStatusService } from "../orderStatus.service";
@graphql.Resolver(() => OrderStatus)
export class OrderStatusResolverBase {
  constructor(protected readonly service: OrderStatusService) {}

  async _orderStatusesMeta(
    @graphql.Args() args: OrderStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrderStatus])
  async orderStatuses(
    @graphql.Args() args: OrderStatusFindManyArgs
  ): Promise<OrderStatus[]> {
    return this.service.orderStatuses(args);
  }

  @graphql.Query(() => OrderStatus, { nullable: true })
  async orderStatus(
    @graphql.Args() args: OrderStatusFindUniqueArgs
  ): Promise<OrderStatus | null> {
    const result = await this.service.orderStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrderStatus)
  async createOrderStatus(
    @graphql.Args() args: CreateOrderStatusArgs
  ): Promise<OrderStatus> {
    return await this.service.createOrderStatus({
      ...args,
      data: {
        ...args.data,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrderStatus)
  async updateOrderStatus(
    @graphql.Args() args: UpdateOrderStatusArgs
  ): Promise<OrderStatus | null> {
    try {
      return await this.service.updateOrderStatus({
        ...args,
        data: {
          ...args.data,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderStatus)
  async deleteOrderStatus(
    @graphql.Args() args: DeleteOrderStatusArgs
  ): Promise<OrderStatus | null> {
    try {
      return await this.service.deleteOrderStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  async getOrder(@graphql.Parent() parent: OrderStatus): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
