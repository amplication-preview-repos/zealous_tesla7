/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrderStatusService } from "../orderStatus.service";
import { OrderStatusCreateInput } from "./OrderStatusCreateInput";
import { OrderStatus } from "./OrderStatus";
import { OrderStatusFindManyArgs } from "./OrderStatusFindManyArgs";
import { OrderStatusWhereUniqueInput } from "./OrderStatusWhereUniqueInput";
import { OrderStatusUpdateInput } from "./OrderStatusUpdateInput";

export class OrderStatusControllerBase {
  constructor(protected readonly service: OrderStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrderStatus })
  async createOrderStatus(
    @common.Body() data: OrderStatusCreateInput
  ): Promise<OrderStatus> {
    return await this.service.createOrderStatus({
      data: {
        ...data,

        order: data.order
          ? {
              connect: data.order,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrderStatus] })
  @ApiNestedQuery(OrderStatusFindManyArgs)
  async orderStatuses(@common.Req() request: Request): Promise<OrderStatus[]> {
    const args = plainToClass(OrderStatusFindManyArgs, request.query);
    return this.service.orderStatuses({
      ...args,
      select: {
        createdAt: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrderStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async orderStatus(
    @common.Param() params: OrderStatusWhereUniqueInput
  ): Promise<OrderStatus | null> {
    const result = await this.service.orderStatus({
      where: params,
      select: {
        createdAt: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrderStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrderStatus(
    @common.Param() params: OrderStatusWhereUniqueInput,
    @common.Body() data: OrderStatusUpdateInput
  ): Promise<OrderStatus | null> {
    try {
      return await this.service.updateOrderStatus({
        where: params,
        data: {
          ...data,

          order: data.order
            ? {
                connect: data.order,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          order: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrderStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrderStatus(
    @common.Param() params: OrderStatusWhereUniqueInput
  ): Promise<OrderStatus | null> {
    try {
      return await this.service.deleteOrderStatus({
        where: params,
        select: {
          createdAt: true,
          id: true,

          order: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
