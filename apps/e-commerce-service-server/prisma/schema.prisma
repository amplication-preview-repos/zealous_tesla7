datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model UserProfile {
  address     String?
  createdAt   DateTime @default(now())
  firstName   String?
  id          String   @id @default(cuid())
  lastName    String?
  phoneNumber String?
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model UserRole {
  createdAt       DateTime @default(now())
  id              String   @id @default(cuid())
  roleDescription String?
  roleName        String?
  updatedAt       DateTime @updatedAt
}

model User {
  carts           Cart[]
  createdAt       DateTime         @default(now())
  email           String?          @unique
  firstName       String?
  id              String           @id @default(cuid())
  lastName        String?
  orders          Order[]
  password        String
  recommendations Recommendation[]
  role            EnumUserRole?
  roles           Json
  updatedAt       DateTime         @updatedAt
  username        String           @unique
  userProfiles    UserProfile[]
  wishlists       Wishlist[]
}

model Category {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model Product {
  createdAt       DateTime         @default(now())
  id              String           @id @default(cuid())
  recommendations Recommendation[]
  updatedAt       DateTime         @updatedAt
}

model Search {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  keyword   String?
  updatedAt DateTime @updatedAt
}

model Filter {
  createdAt DateTime @default(now())
  criteria  String?
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  value     String?
}

model Recommendation {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Cart {
  createdAt  DateTime @default(now())
  id         String   @id @default(cuid())
  totalPrice Float?
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Wishlist {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Order {
  createdAt     DateTime      @default(now())
  id            String        @id @default(cuid())
  orderDate     DateTime?
  orderStatuses OrderStatus[]
  payments      Payment[]
  shippings     Shipping[]
  totalAmount   Float?
  updatedAt     DateTime      @updatedAt
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?
}

model OrderStatus {
  createdAt DateTime               @default(now())
  id        String                 @id @default(cuid())
  order     Order?                 @relation(fields: [orderId], references: [id])
  orderId   String?
  status    EnumOrderStatusStatus?
  updatedAt DateTime               @updatedAt
}

model Refund {
  amount     Float?
  createdAt  DateTime  @default(now())
  id         String    @id @default(cuid())
  payment    Payment?  @relation(fields: [paymentId], references: [id])
  paymentId  String?
  reason     String?
  refundDate DateTime?
  updatedAt  DateTime  @updatedAt
}

model Payment {
  amount        Float?
  createdAt     DateTime                  @default(now())
  id            String                    @id @default(cuid())
  order         Order?                    @relation(fields: [orderId], references: [id])
  orderId       String?
  paymentDate   DateTime?
  paymentMethod EnumPaymentPaymentMethod?
  refunds       Refund[]
  updatedAt     DateTime                  @updatedAt
}

model Delivery {
  createdAt       DateTime                    @default(now())
  deliveryAddress String?
  deliveryDate    DateTime?
  deliveryStatus  EnumDeliveryDeliveryStatus?
  id              String                      @id @default(cuid())
  shipping        Shipping?                   @relation(fields: [shippingId], references: [id])
  shippingId      String?
  updatedAt       DateTime                    @updatedAt
}

model Shipping {
  createdAt      DateTime                    @default(now())
  deliveries     Delivery[]
  id             String                      @id @default(cuid())
  order          Order?                      @relation(fields: [orderId], references: [id])
  orderId        String?
  shippingCost   Float?
  shippingDate   DateTime?
  shippingMethod EnumShippingShippingMethod?
  trackingNumber String?
  updatedAt      DateTime                    @updatedAt
}

enum EnumUserRole {
  Option1
}

enum EnumOrderStatusStatus {
  Option1
}

enum EnumPaymentPaymentMethod {
  Option1
}

enum EnumDeliveryDeliveryStatus {
  Option1
}

enum EnumShippingShippingMethod {
  Option1
}
